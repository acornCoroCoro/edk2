#ifndef MEMORYMAP_H_
#define MEMORYMAP_H_

#include <Uefi/UefiBaseType.h>
#include <Protocol/SimpleFileSystem.h>

struct MemoryMap {
    UINTN BufferSize;
    VOID *Buffer;
    UINTN MapSize;
    UINTN MapKey;
    UINTN DescriptorSize;
    UINT32 DescriptorVersion;
};

/** Convert a memory type number into the corresponding string representation.
 *
 * @param Type A memory type number.
 *
 * @retval The string representation of the type number.
 */
const CHAR16 *GetMemoryTypeUnicode(EFI_MEMORY_TYPE Type);

/** Allocate buffer of memory map.
 * Map.Buffer is automatically allocated via gBS->AllocatePool with the given size.
 * It is caller's responsibility to free the memory pool.
 *
 * @param Map An instance to be initialized.
 *
 * @retval EFI_SUCCESS  Successfully initialized the instance.
 * @retval Other        An error occurred.
 */
EFI_STATUS AllocateMemoryMap(
    IN struct MemoryMap *Map,
    IN UINTN BufferSize
    );

/** Get the current memory map.
 *
 * @param Map Where a memory map is returned.
 *
 * @retval EFI_SUCCESS  Successfully got a memory map.
 * @retval Other        An error occurred.
 */
EFI_STATUS GetMemoryMap(
    IN struct MemoryMap *Map
    );

/** Save the given memory map to the given file.
 *
 * @param Map A memory map.
 * @param File Opened file protocol where the memory map is saved.
 *
 * @retval EFI_SUCCESS  Successfully opened the protocol.
 * @retval Other        An error occurred.
 */
EFI_STATUS SaveMemoryMap(
    IN struct MemoryMap *Map,
    IN EFI_FILE_PROTOCOL *File
    );

/** Save the current memory map to a file specified by the given path.
 *
 * @param Dir  Source location. This would typically be a directory.
 * @param FilePath Path to a file where the memory map is saved.
 *
 * @retval EFI_SUCCESS  Successfully opened the protocol.
 * @retval Other        An error occurred.
 */
EFI_STATUS SaveCurrentMemoryMapToPath(
    IN EFI_FILE_PROTOCOL *Dir,
    IN CHAR16 *FilePath
    );

/** Remap virtual addresses in the given memory map.
 * Memory areas which type is EfiBootServicesCode/Data or EfiConventionalMemory
 * are remapped from 0xf0000000.
 * Other memory areas are remapped to the same address of their physical address.
 *
 * @param Map A memory map generated by gBS->GetMemoryMap.
 */
VOID RemapVirtual(
    IN struct MemoryMap *Map
    );

#endif // MEMORYMAP_H_
